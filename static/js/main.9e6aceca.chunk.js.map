{"version":3,"sources":["App.js","Utilities.js","reportWebVitals.js","index.js"],"names":["require","config","App","useState","input","setInput","weatherData","setWeatherData","countryName","setCountryName","fetchWeaterData","i","query","process","fetch","then","res","json","data","sys","country","name","catch","e","console","log","RenderWeatherEmoji","weather","id","Result","cod","className","Math","round","k","main","temp","wind","speed","rain","searchCurrentLocation","navigator","geolocation","getCurrentPosition","p","lat","lon","fetchWeatherDataByCoords","coords","latitude","longitude","onSubmit","preventDefault","document","getElementById","blur","handleSubmit","onChange","target","value","type","placeholder","autoFocus","disabled","onClick","onTouchStart","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9e6aceca.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { kelvinToCelsius } from './Utilities'\n\nrequire('dotenv').config()\n\nconst App = () => {\n    const [input, setInput] = useState()\n    const [weatherData, setWeatherData] = useState()\n    const [countryName, setCountryName] = useState()\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        document.getElementById('inputField').blur()\n        fetchWeaterData(input)\n    }\n\n    const fetchWeatherDataByCoords = (lat, lon) => {\n        const query = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}`\n        fetch(query)\n            .then((res) => res.json())\n            .then((data) => {\n                setWeatherData(data)\n                if (data.sys) {\n                    fetch(\n                        `https://restcountries.eu/rest/v2/alpha/${data.sys.country}`\n                    )\n                        .then((res) => res.json())\n                        .then((data) => {\n                            setCountryName(data.name)\n                        })\n                        .catch((e) => console.log(e))\n                }\n            })\n            .catch()\n    }\n\n    const fetchWeaterData = (i) => {\n        const query = `https://api.openweathermap.org/data/2.5/weather?q=${i}&appid=${process.env.REACT_APP_API_KEY}`\n        fetch(query)\n            .then((res) => res.json())\n            .then((data) => {\n                setWeatherData(data)\n                if (data.sys) {\n                    fetch(\n                        `https://restcountries.eu/rest/v2/alpha/${data.sys.country}`\n                    )\n                        .then((res) => res.json())\n                        .then((data) => {\n                            setCountryName(data.name)\n                        })\n                        .catch((e) => console.log(e))\n                }\n            })\n            .catch()\n    }\n\n    const RenderWeatherEmoji = () => {\n        if (weatherData.weather[0].id > 800) {\n            // Clouds\n            return '‚òÅÔ∏è'\n        }\n        if (weatherData.weather[0].id === 800) {\n            // Clear\n            return '‚òÄÔ∏è'\n        }\n        if (weatherData.weather[0].id > 700) {\n            // Atmosphere\n            return 'üå™'\n        }\n        if (weatherData.weather[0].id > 600) {\n            // Snow\n            return 'üå®'\n        }\n        if (weatherData.weather[0].id > 500) {\n            // Rain\n            return 'üåß'\n        }\n        if (weatherData.weather[0].id > 300) {\n            // Drizzle\n            return 'üå¶'\n        }\n        if (weatherData.weather[0].id > 200) {\n            // Thunderstorm\n            return '‚õà'\n        }\n        return ''\n    }\n\n    const Result = () => {\n        if (weatherData) {\n            switch (weatherData.cod) {\n                case 200:\n                    return (\n                        <section className='weather'>\n                            <h2 className='w-city'>{weatherData.name}</h2>\n                            <h3 className='w-country'>\n                                {countryName\n                                    ? countryName\n                                    : weatherData.sys.name}\n                            </h3>\n                            <p className='w-deg'>\n                                <RenderWeatherEmoji />\n                                <span className='w-deg-number'>\n                                    {Math.round(\n                                        kelvinToCelsius(weatherData.main.temp)\n                                    )}\n                                    ¬∞c\n                                </span>\n                            </p>\n                            <p className='w-wind'>\n                                <span className='w-wind-number'>\n                                    üí®\n                                    {Math.round(weatherData.wind.speed)}{' '}\n                                </span>\n                                m/s\n                            </p>\n                            <p className='w-rain'>\n                                <span className='w-rain-number'>\n                                    ‚òÇÔ∏è\n                                    {weatherData.rain\n                                        ? weatherData.rain['1h']\n                                        : '0'}{' '}\n                                </span>\n                                mm\n                            </p>\n                        </section>\n                    )\n                case '400':\n                    return `You weren't supposed to do that üëÄ`\n                case '404':\n                    return (\n                        <p className='error'>\n                            Couldn't find that location. Please try somewhere\n                            else ü§î\n                        </p>\n                    )\n                default:\n                    return 'empty'\n            }\n        } else return ''\n    }\n\n    const searchCurrentLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((p) => {\n                fetchWeatherDataByCoords(p.coords.latitude, p.coords.longitude)\n            })\n        }\n    }\n\n    return (\n        <main className='wrapper'>\n            <h1>Tenki</h1>\n            <section className='input-section'>\n                <form onSubmit={(e) => handleSubmit(e)}>\n                    <input\n                        id='inputField'\n                        onChange={(e) => setInput(e.target.value)}\n                        type='text'\n                        placeholder='Enter a location'\n                        autoFocus\n                    ></input>\n                    <button\n                        className={input ? '' : 'disabled'}\n                        disabled={!input}\n                    >\n                        Search\n                    </button>\n                </form>\n                <button\n                    className='current-loc'\n                    onClick={() => searchCurrentLocation()}\n                    onTouchStart={() => searchCurrentLocation()}\n                >\n                    Use current location\n                </button>\n            </section>\n            <section className='result'>\n                <Result />\n            </section>\n        </main>\n    )\n}\n\nexport default App\n","export const kelvinToCelsius = (k) => {\n    return k - 273.15\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}